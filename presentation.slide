# All Types of Go Types

GoWest 2020

Carson Anderson
DevX Engineer, Weave
@carson_ops

## Questions I Had About Go Types

* How big is a bool?
* How big is an `int`?
* What type is a `constant`?s
* What is `iota`?
* How big is an empty `struct`?
* Are all `nil`s identical?
* How big is my `string`?
* What's a `rune`?
* What happens when I pass a `slice`?
* When should I pass a `struct` vs `pointer`?

## Bools

## How big is a bool?

: We are starting simple, but this shows that even seemingly easy assumptions can be wrong

A seemingly simple question

.play examples/bool.go /^func main/,/^}

: Size is not what is expected

## Makes sense... Except!

: Explain reflect.SizeOf since we will use it a lot

From the Go docs on `unsafe.SizeOf`:

.code examples/bool.go /START OMIT/,/END OMIT/

: Size is not what is expected

So really...

.play examples/bool-bits.go /^func main/,/^}

## Interesting Golang Type Discoveries

1. Bools can be **more than one bit**

## Integer Types

## IntXX Types Occurances

How often the different integer types occur in the go source:

: count from source using 'git ls-files | xargs -n1 grep -Iswo int | wc -l'
: it's a rought calculation, but good enough to illustrate the point
: call out that the int type is used far more than any other type

.html /html/ints.html

Plain old `int` is the most used integer type by far. But.. how *big* is it?

## intXX Size Proof

.play examples/ints.go /^func main/,/^}

## uintXX Size Proof

.play examples/uints.go /^func main/,/^}

## But what about plain old `int` and `uint`?

.play examples/int.go /^func main/,/^}

## That answers it, right!

.image https://media.giphy.com/media/SVgKToBLI6S6DUye1Y/giphy.gif _ 800

## Try targeting a different architecure with GOARCH

.code examples/int.go /^func main/,/^}

.play examples/int-arch-faker.go /BEGIN OMIT/,/END OMIT/


## int and uint size in Go is implementation-specific

.link  https://golang.org/ref/spec#Numeric_types

.code examples/int-sizes.txt

In short:

* 32 bit for 32 bit systems
* 64 bit for 64 bit systems

So.. Which one do I use?

* (u)int is suggested for most cases
* (u)intXX for shared data models

## Interesting Golang Type Discoveries

1. Bools can be **more than one bit**
1. `int` and `uint` can **change size**

## Float Types

## Float Sizes

.play examples/floats-sizes.go /^func main/,/^}

## Float casting is odd..

.play examples/int-casting.go /^func main/,/^}

.play examples/float-casting.go /^func main/,/^}

## Float variables have arbitrary precision

.play examples/floats-math-vars.go /^func main/,/^}

## What about float contants?

.play examples/floats-math-const.go /^func main/,/^}

## But how?

.link https://golang.org/ref/spec#Constants

> Implementation restriction: Although numeric constants have arbitrary precision in the language, a compiler may implement them using an internal representation with limited precision

.code examples/floats-math-const.go /^func main/,/^}

## Interesting Golang Type Discoveries

1. Bools can be **more than one bit**
1. `int` and `uint` can **change size**
1. Float constants can have **fixed precision**

## Constants

## Constants - Not what you think

.play examples/constants-time.go /^func main/,/^}

## Lets make that better!

.play examples/constants-time-2.go /^func main/,/^}

## Now make it configurable!

.play examples/constants-time-3.go /^func main/,/^}

## What??

.code examples/constants-time-err.txt

But we only changed one line:

.code examples/constants-time-2.go /BEGIN OMIT/,/END OMIT/
.code examples/constants-time-3.go /BEGIN OMIT/,/END OMIT/

## What Type of Constant is that? None!

.link https://golang.org/ref/spec#Constants

> Constants may be typed or untyped. Literal constants, true, false, iota, and certain constant expressions containing only untyped constant operands are untyped.

> A constant may be given a type explicitly by a constant declaration or conversion, or implicitly when used in a variable declaration or an assignment or as an operand in an expression.

## Under the hood...

Go effectively does this for us during compilation

.code examples/constants-time-2-behind.go /^func main/,/^}

## Lets do that then!

.play examples/constants-time-4.go /^func main/,/^}

## Interesting Golang Type Discoveries

1. Bools can be **more than one bit**
1. `int` and `uint` can **change size**
1. Float constants can have **fixed precision**
1. Constants can be **untyped**

## iota

## What about it?

`iota` is a go contant. But what type?

.play examples/constants-iota.go /^const/,/^}

## What does the spec say?

.link https://golang.org/ref/spec#Constants

> The predeclared identifier iota denotes an integer constant.

## But what about this?

.play examples/constants-iota-types.go /^const/,/^}

## Not what I expected...

.link https://golang.org/ref/spec#Iota

> Within a constant declaration, the predeclared identifier iota represents **successive untyped integer constants**.

.play examples/constants-iota-types-replaced.go /BEGIN OMIT/,/END OMIT/

## But that's not all!

.link https://golang.org/ref/spec#Iota

> Its value is the index of the respective ConstSpec in that constant declaration, starting at zero.

Iota is not a type, its a **dynamic constant**. And because of this, it a can be treated like a value and even be put into expressions

.play examples/constants-iota-expr.go /^const/,/^}

## Interesting Golang Type Discoveries

1. Bools can be **more than one bit**
1. `int` and `uint` can **change size**
1. Float constants can have **fixed precision**
1. Constants can be **untyped**
1. `iota` is an `untyped int`, but it **has a value** that *changes*

## One last iota trick

Use the `stringer` generator for meaningful names!

.play examples/constants-iota-generator-fun/combined.go /BEGIN OMIT/,/END OMIT/

**Run `go generate` first!!**

## Arrays And Slices

## Arrays

Arrays are swaths of contiguous memory for a specific type.

They have a fixed length and can be indexed to get the value at any point in the array.

.play examples/arrays.go /^func main/,/^}

## Slices

Slices are a convenience layer on top of arrays, but they are backed by arrays.

Slices really have **two sizes**, the size of the `sliceHeader` and the size of the underlying `array`

When you pass a slice around, you pass a copy of the `sliceHeader` which is essentially a 3-word length
struct that is completely hidden by the language.

Each slice header can be thought of like a struct with the following composition:

```go
type sliceHeader struct {
    ptr *[]Elem
    len int
    cap int
}
```

## Slice Sizes

.play examples/slices-sizes.go /^func main/,/^}

## Bytes

## Bytes Defined

Go has a raw data type called `byte` they are actually an alias to the `uint8` type.

There are lots of ways to declare bytes

.play examples/byte-declarations.go

## Byte Slices, Strings, and Runes

## Byte Slice

It is the type most often used when dealing with IO operations. Or large sets of raw data.

From `ioutil`:
* `func ReadFile(filename string) ([]byte, error)`

From `encoding/json`:
* `func Marshal(v interface{}) ([]byte, error)`

They are also the basic data type that underlies both `runes` and `strings`.

## Strings

* Strings are immutable
* Strings are actually backed by byte slices
* Strings are passed by copy of their `sliceHeader`

## String Indexing

Because strings are actually byte slices under the hood, it is very easy to index them.

.play examples/strings-indexing.go /^func main/,/^}

## String Indexing - gotcha!

Strings are `[]byte` under the hood. And can contain non-ASCII data

.play examples/strings-indexing-awry.go /^func main/,/^}

## String Indexing - Why did that happen?

* strings are `[]byte`
* non-ASCII characters are made up of multiple bytes

.play examples/strings-indexing-awry-explained.go /^func main/,/^}

**But how do we fix it?**

## Runes!

* Runes are the default type used when creating a fuzzy constant with single quotes
* Runes are an alias to the `int32` type

.play examples/runes.go /^func main/,/^}

## Runes to Strings!

We can explicitly convert them to strings to print:

.play examples/runes-strings.go /^func main/,/^}

## Runes to Strings to Byte Slices!

The go spec clearly defines how rune to string converson:

.link https://golang.org/ref/spec#Conversions_to_and_from_a_string_type

> 3. Converting a slice of runes to a string type yields a string that is the concatenation of the individual rune values converted to strings.

## So that means we can do this:

.play examples/runes-slice.go /^func main/,/^}

## Remember this?

.play examples/strings-indexing-awry-explained.go /^func main/,/^}

## String Indexing - []rune

You can convert to strings to `[]rune` to index 'characters' more reliably

.play examples/strings-indexing-awry-fixed.go /^func main/,/^}

## String Indexing - Gotcha Again!

But even then, strings don't always contain printable bytes.

.play examples/strings-indexing-bytes.go /^func main/,/^}

**Add loop example**

## String Looping

.play examples/strings-loop.go /^func main/,/^}

Remember: `string` is really `[]byte`

## Better String Looping

You must cast `string` to `[]rune` to iterate properly.

.play examples/strings-loop-fixed.go /^func main/,/^}

## Even Better

The `range` operator is smart! It knows to do this for you!

.play examples/strings-range.go /^func main/,/^}

## Even with NULL Bytes

.play examples/strings-range-null.go /^func main/,/^}

## Structs

Stucts are the way that go organizes data.

They can have zero to N fields

.play examples/structs.go /BEGIN OMIT/,/END OMIT/

## They are usually as big as their fields combined

.play examples/structs-sizes.go /^func main/,/^}

## Even when nested

.play examples/structs-sizes-complex.go /^func main/,/^}

## But not always!

.play examples/structs-sizes-padding.go /^func main/,/^}

## Go Spec

Explain that structs must be "naturally" alligned

Go will pad the memory as needed in order to get struct fields to align along word boundries.

Think of it as the complier doing this for you:

.code examples/structs-sizes-padding-explained.go /^func main/,/^}

: Basically, processor word size can be thought of as a "shovel size" where the system HAS to get enough data to fill the shovel all the time. So it's much more effecient on the system to ensure that data does not have to be fetched in uneven chunks.

## Struct Sizes - Padding Natural Alignment

.play examples/structs-sizes-padding-alt.go /^func main/,/^}

## Struct Sizes - Padding Bools

.play examples/structs-sizes-padding-bools.go /^func main/,/^}

## Struct Sizes - Padding Bools Continued

.play examples/structs-sizes-padding-bools-more.go /^func main/,/^}

## Struct Sizes - Padding Bools Continued

.play examples/structs-sizes-padding-bools-more-awry.go /^func main/,/^}

## But What About Empty Stucts?

`type nothin struct{}`

How much space does that take?

Is there a `structHeader`?

## Nope! Empty Structs are Zero Size

.play examples/empty-struct.go /^func main/,/^}

## Empty Structs Of All Empty Members Are Zero Size

.play examples/empty-struct-nested.go /^func main/,/^}

## Empty Struct Arrays Are Zero Size

.play examples/empty-struct-array.go /^func main/,/^}

## Empty struct slices are only as big as the sliceHeader

.play examples/empty-struct-slice.go /^func main/,/^}

## The IMPORTANT Part - Empty struct

Empty structs are most practically used in maps and channels

* This signals to the code reader that the *content* of the map or channel is not important.
* The memory savings in very large maps is also a nice bonus
  * Even `map[string]bool` wastes **8 bits** per entry

## Maps

## Maps Defined

## How big is a map?

https://github.com/golang/go/blob/d99fe1f40dfacfdebee22c13ed4471fd50f2cc1a/src/runtime/map.go#L115

## Interfaces

## Interfaces Defined

Since Interfaces an hold anything, they have to be stored as two-word
pairs of data:

* A `uintptr` to information about the type stored in the interface
* A `uintptr` to the associated data behind the type

## Interface sizes are always the same

.play examples/interfaces.go /BEGIN OMIT/,/END OMIT/

## Interfaces nil is not a nil

.play examples/interfaces-nils.go /^func main/,/^}
